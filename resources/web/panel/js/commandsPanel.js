/*
 * Copyright (C) 2016 phantombot.tv
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * @author ScaniaTV
 */

/*
 * customCommandsPanel.js
 * Drives the Custom Commands Panel
 */
(function() {
    var commands = {},
        icon = [];

    icon['false'] = '<i style="color: #6136b1" class="fa fa-circle-o" />';
    icon['true'] = '<i style="color: #6136b1" class="fa fa-circle" />';


    /*
     * @function onMessage
     * @info This event is generated by the connection (WebSocket) object.
     *
     * @param {string} message
     */
    function onMessage(message) {
        var msgObject;

        try {
            msgObject = JSON.parse(message.data);
        } catch (ex) {
            return;
        }

        if (panelHasQuery(msgObject)) {
            var key = '',
                value = '',
                html = '<table>',
                results,
                i, l;

            /* Info from the permcom table */
            if (panelCheckQuery(msgObject, 'commands_permission')) {
                results = msgObject['results'].sort(sort);

                for (i in results) {
                    key = results[i]['key'];
                    value = results[i]['value'];

                    if (!key.includes(' ')) {
                        if (commands[key] === undefined) {
                            commands[key] = { isDisabled: false, response: null, isCustom: false, cost: 0, reward: 0, cooldown: -1, permission: value, alias: '', subCommand: {} };
                        } else {
                            commands[key].permission = value;
                            commands[key].isDisabled = false;
                        }
                    } else {
                        key = key.split(' ');
                        if (commands[key[0]] === undefined) {
                            commands[key[0]] = { isDisabled: false, response: null, isCustom: false, cost: 0, reward: 0, cooldown: -1, permission: value, alias: '', subCommand: {} };
                        }

                        if (commands[key[0]].subCommand[key[1]] === undefined) {
                            commands[key[0]].subCommand[key[1]] = { isDisabled: false, response: null, isCustom: false, cost: 0, reward: 0, cooldown: -1, permission: value, alias: '' };
                        } else {
                            commands[key[0]].subCommand[key[1]].permission = value;
                            commands[key[0]].subCommand[key[1]].isDisabled = false;
                        }
                    }
                }
                /* Do the query for the other settings once permcom is done. */
                doLiteQuery();
            }

            /* Info from the aliases table */
            if (panelCheckQuery(msgObject, 'commands_aliases')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[value] !== undefined && !value.includes(' ') && !value.includes(';')) {
                        commands[value].alias = (key ? key : '');
                    } else if (value.includes(' ')) {
                        value = value.split(' ');
                        if (commands[value[0]] !== undefined && commands[value[0]].subCommand[value[1]] !== undefined && !value.includes(';')) {
                            commands[value[0]].subCommand[value[1]].alias = (key ? key : '');
                        }
                    } else {
                        value = value.split(';');
                        for (var i in value) {
                            if (commands[value[i]] !== undefined) {
                                commands[value[i]].alias = key;
                            }
                        }
                    }
                }
            }

            /* Info from the pricecom table */
            if (panelCheckQuery(msgObject, 'commands_costs')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (!key.includes(' ')) {
                        if (commands[key] !== undefined) {
                            commands[key].cost = (value ? value : 0); 
                        }
                    } else {
                        key = key.split(' ');
                        if (commands[key[0]] !== undefined && commands[key[0]].subCommand[key[1]] !== undefined) {
                            commands[key[0]].subCommand[key[1]].cost = (value ? value : 0); 
                        }
                    }
                }
            }

            /* Info from the paycom table */
            if (panelCheckQuery(msgObject, 'commands_reward')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (!key.includes(' ')) {
                        if (commands[key] !== undefined) {
                            commands[key].reward = (value ? value : 0); 
                        }
                    } else {
                        key = key.split(' ');
                        if (commands[key[0]] !== undefined && commands[key[0]].subCommand[key[1]] !== undefined) {
                            commands[key[0]].subCommand[key[1]].reward = (value ? value : 0); 
                        }
                    }
                }
            }

            /* Info from the cooldown table */
            if (panelCheckQuery(msgObject, 'commands_cooldown')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (panelMatch(key, 'globalCooldown')) {
                        $('#globalCooldown').html(icon[value]);
                    } else if (panelMatch(key, 'perUserCooldown')) {
                        $('#perUserCooldown').html(icon[value]);
                    } else if (panelMatch(key, 'modCooldown')) {
                        $('#modCooldown').html(icon[value]);
                    } else if (panelMatch(key, 'globalCooldownTime')) {
                        $('#global-cooldown2').html(value + ' Seconds');
                        $('#global-cooldown').val(value);
                    }

                    if (!key.includes(' ')) {
                        if (commands[key] !== undefined) {
                            commands[key].cooldown = (value ? value : 0); 
                        }
                    } else {
                        key = key.split(' ');
                        if (commands[key[0]] !== undefined && commands[key[0]].subCommand[key[1]] !== undefined) {
                            commands[key[0]].subCommand[key[1]].cooldown = (value ? value : 0); 
                        }
                    }
                }
            }

            /* Info from the disabledCommands table */
            if (panelCheckQuery(msgObject, 'commands_disabled')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (!key.includes(' ')) {
                        if (commands[key] !== undefined) {
                            commands[key].isDisabled = (value == 'true' ? true : false); 
                        }
                    } else {
                        key = key.split(' ');
                        if (commands[key[0]] !== undefined && commands[key[0]].subCommand[key[1]] !== undefined) {
                            commands[key[0]].subCommand[key[1]].isDisabled = (value == 'true' ? true : false);
                        }
                    }
                }
            }

            /* Info from the command table */
            if (panelCheckQuery(msgObject, 'commands_custom')) {
                html = '<table> <tr> <th style="border: 1px solid #3a3939;">Command</th> <th style="border: 1px solid #3a3939;">Response</th><th style="border-top: 1px solid #3a3939; border-bottom: 1px solid #3a3939;"></th>' +
                       '<th style="border-top: 1px solid #3a3939; border-bottom: 1px solid #3a3939;"></th></tr>';
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[key].isCustom === undefined) {
                        console.log('[ERROR] Command permission for command !' + key + ' does not exists! Set it with "!command permission ' + key + ' 7".');
                    }

                    commands[key].isCustom = true;
                    commands[key].response = value;
                    if (value.length > 75) {
                        value = value.substring(0, 75);
                        value += '...';
                    }

                    html += '<tr>' +
                        '<td style="width: 20%; border: 1px solid #3a3939;">!' + key + '</td>' +
                        '<td style="width: 80%; border: 1px solid #3a3939;">' + value + '</td>' +
                        '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.open(\''+ key +'\', \'null\',\'true\')"><i class="fa fa-pencil"/></button></td>' +
                        '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.remove(\''+ key +'\', \'false\')"><i class="fa fa-trash"/></button></td>' +
                        '</tr>';
                }
                html += '</table>';
                $('#command-list').html(html);
                handleInputFocus();

                html = '<table> <tr> <th style="border: 1px solid #3a3939;">Command</th> <th style="border: 1px solid #3a3939;">Status</th><th style="border: 1px solid #3a3939;">Cooldown</th>' +
                '<th style="border: 1px solid #3a3939;">Cost</th> <th style="border: 1px solid #3a3939;">Reward</th> <th style="border: 1px solid #3a3939;">Permission</th>' +
                '<th style="border-top: 1px solid #3a3939; border-bottom: 1px solid #3a3939;"></th></tr>';
                var keys = Object.keys(commands);
                var subKeys;

                for (i in keys) {
                    if (commands[keys[i]] !== undefined && commands[keys[i]].isCustom === false) {
                        html += '<tr>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">!' + keys[i] + '</td>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].isDisabled ? 'Disabled' : 'Enabled') + '</td>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].cooldown != -1 ? commands[keys[i]].cooldown + ' sec' : 'Global') + '</td>' +
                            '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].cost + '</td>' +
                            '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].reward + '</td>' +
                            '<td style="width: 10%; border: 1px solid #3a3939;">' + getPermissionNameById(commands[keys[i]].permission) + '</td>' +
                            '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.open(\''+ keys[i] +'\', \'false\', \'false\')"><i class="fa fa-pencil"/></button></td>' +
                            '</tr>';
                        subKeys = Object.keys(commands[keys[i]].subCommand);
                        for (l in subKeys) {
                            html += '<tr>' +
                                '<td style="width: 20%; border: 1px solid #3a3939;">!' + keys[i] + ' ' + subKeys[l] + '</td>' +
                                '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].subCommand[subKeys[l]].isDisabled ? 'Disabled' : 'Enabled') + '</td>' +
                                '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].subCommand[subKeys[l]].cooldown != -1 ? commands[keys[i]].subCommand[subKeys[l]].cooldown + ' sec' : 'Global') + '</td>' +
                                '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].subCommand[subKeys[l]].cost + '</td>' +
                                '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].subCommand[subKeys[l]].reward + '</td>' +
                                '<td style="width: 10%; border: 1px solid #3a3939;">' + getPermissionNameById(commands[keys[i]].subCommand[subKeys[l]].permission) + '</td>' +
                                '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.open(\''+ keys[i] +'\', \''+ subKeys[l] +'\', \'false\')">' +
                                '<i class="fa fa-pencil"/></button></td>' +
                                '</tr>';
                        }
                    }
                }
                html += '</table>';
                $('#default-command-list').html(html);
                handleInputFocus();
            }
        }
    }

    /**
     * @function doQuery
     */
    function doQuery() {
        sendDBKeys('commands_permission', 'permcom');
    }

    /**
     * @function doLiteQuery
     */
    function doLiteQuery() {
        sendDBKeys('commands_aliases', 'aliases');
        sendDBKeys('commands_costs', 'pricecom');
        sendDBKeys('commands_reward', 'paycom');
        sendDBKeys('commands_disabled', 'disabledCommands');
        sendDBKeys('commands_cooldown', 'cooldown');
        setTimeout(function() { sendDBKeys('commands_custom', 'command'); }, 50);
    }

    /**
     * @function sort
     *
     * @param {Object} a
     * @param {Object} b
     */
    function sort(a, b) {
        return panelStrcmp(a.key, b.key);
    }

    /**
     * @function getPermissionNameById
     *
     * @param {int} id
     */
    function getPermissionNameById(id) {
        if (id == null) {
            return 'Everyone';
        }
        if (id.match(/1/g)) {
            return 'Administrators';
        } else if (id.match(/2/g)) {
            return 'Moderators';
        } else if (id.match(/3/g)) {
            return 'Subscribers';
        } else if (id.match(/4/g)) {
            return 'Donators';
        } else if (id.match(/5/g)) {
            return 'Hosters';
        } else if (id.match(/6/g)) {
            return 'Regulars';
        } else {
            return 'Everyone';
        }
    }

    /**
     * @function getPermissionIdByName
     *
     * @param {string} name
     */
    function getPermissionIdByName(name) {
        if (name == null) {
            return 7;
        }
        if (name.match(/Administrators/ig)) {
            return 1;
        } else if (name.match(/Moderators/ig)) {
            return 2;
        } else if (name.match(/Subscribers/ig)) {
            return 3;
        } else if (name.match(/Donators/ig)) {
            return 4;
        } else if (name.match(/Hosters/ig)) {
            return 5;
        } else if (name.match(/Regulars/ig)) {
            return 6;
        } else {
            return 7;
        }
    }

    /**
     * @function open
     *
     * @export $.modal
     * @param {string} key
     * @param {string} subKey
     * @param {boolean} customCMD
     */
    function open(key, subKey, customCMD) {
        if (customCMD == 'true') {
            if (commands[key] !== undefined) {
                $('#edit-command-name').val('!' + key);
                $('#edit-command-response').val(commands[key].response);
                $('#edit-command-alias').val(commands[key].alias);
                $('#edit-command-cost').val(commands[key].cost);
                $('#edit-command-reward').val(commands[key].reward);
                $('#edit-command-permission').html(getPermissionNameById(commands[key].permission));
                $('#edit-command-active').html((commands[key].isDisabled ? 'No' : 'Yes'));
                $('#edit-command-cooldown2').html((commands[key].cooldown != -1 ? commands[key].cooldown + ' Seconds' : 'Global Cooldown'));
                document.getElementById('edit-command-cooldown').value = commands[key].cooldown;
                $("#editcommand").modal();
            }
        } else {
            if (subKey == 'false') {
                $('#default-command-name').val('!' + key);
                $('#default-command-alias').val(commands[key].alias);
                $('#default-command-cost').val(commands[key].cost);
                $('#default-command-reward').val(commands[key].reward);
                $('#default-command-permission').html(getPermissionNameById(commands[key].permission));
                $('#default-command-active').html((commands[key].isDisabled ? 'No' : 'Yes'));
                $('#default-command-cooldown2').html((commands[key].cooldown != -1 ? commands[key].cooldown + ' Seconds' : 'Global Cooldown'));
                document.getElementById('default-command-cooldown').value = commands[key].cooldown;
                $("#defaultcommand").modal();
            } else {
                $('#default-command-name').val('!' + key + ' ' + subKey);
                $('#default-command-alias').val(commands[key].subCommand[subKey].alias);
                $('#default-command-cost').val(commands[key].subCommand[subKey].cost);
                $('#default-command-reward').val(commands[key].subCommand[subKey].reward);
                $('#default-command-permission').html(getPermissionNameById(commands[key].subCommand[subKey].permission));
                $('#default-command-active').html((commands[key].subCommand[subKey].isDisabled ? 'No' : 'Yes'));
                $('#default-command-cooldown2').html((commands[key].subCommand[subKey].cooldown != -1 ? commands[key].subCommand[subKey].cooldown + ' Seconds' : 'Global Cooldown'));
                document.getElementById('default-command-cooldown').value = commands[key].subCommand[subKey].cooldown;
                $("#defaultcommand").modal();
            }
        }
    }

    /**
     * @function remove
     *
     * @export $.modal
     * @param {string} key
     */
    function remove(key, open) {
        if (open == 'false') {
            if (commands[key] !== undefined) {
                $('#delete-command').html(key);
                $('#deletecommand').modal();
            }
        } else {
            key = $('#delete-command').html();
            sendDBDelete('command_delete', 'command', key);
            delete commands[key];
            setTimeout(function() { doQuery(); sendCommand('deletecommandpanel ' + key); }, TIMEOUT_WAIT_TIME);
        }
    }

    /**
     * @function add
     *
     * @export $.modal
     */
    function add() {
        addCommand('command');
        setTimeout(function() {
            commandAlias('command');
            commandCost('command');
            commandReward('command');
            commandCooldown('command');
            commandPermission('command');
        }, 100);
        setTimeout(function() { doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    /**
     * @function edit
     *
     * @export $.modal
     */
    function edit() {
        editCommand('edit-command');
        commandAlias('edit-command');
        commandCost('edit-command');
        commandReward('edit-command');
        commandCooldown('edit-command');
        commandPermission('edit-command');
        commandActive('edit-command');
        setTimeout(function() { doQuery(); }, TIMEOUT_WAIT_TIME * 2);
    }

    /**
     * @function default
     *
     * @export $.modal
     */
    function def() {
        commandAlias('default-command');
        commandCost('default-command');
        commandReward('default-command');
        commandCooldown('default-command');
        commandPermission('default-command');
        commandActive('default-command');
        setTimeout(function() { doQuery(); $('#command-name').val(''); }, TIMEOUT_WAIT_TIME * 2);
    }

    /**
     * @function editCommand
     *
     * @param {string} htmlId
     */
    function editCommand(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', ''),
            response = $('#' + htmlId + '-response').val();

        sendCommand('editcommandpanel ' + command.toLowerCase() + ' ' + response);
    }

    /**
     * @function addCommand
     *
     * @param {string} htmlId
     */
    function addCommand(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', ''),
            response = $('#' + htmlId + '-response').val();


        sendCommand('addcommandpanel ' + command.toLowerCase() + ' ' + response);
    }

    /**
     * @function commandAlias
     *
     * @param {string} htmlId
     */
    function commandAlias(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', '').replace(/ /g, '---'),
            alias = $('#' + htmlId + '-alias').val();

        if (alias.length == 0) {
            if (command.includes('---')) {
                var cmd = command.split('---');
                if (commands[cmd[0]] !== undefined && commands[cmd[0]].subCommand[cmd[1]] !== undefined && commands[cmd[0]].subCommand[cmd[1]].alias != '') {
                    sendCommand('removealiaspanel ' + commands[cmd[0]].subCommand[cmd[1]].alias);
                    commands[cmd[0]].subCommand[cmd[1]].alias = '';
                    delete commands[commands[cmd[0]].subCommand[cmd[1]].alias];
                }
            } else {
                if (commands[command] !== undefined && commands[command].alias != '') {
                    sendCommand('removealiaspanel ' + commands[command].alias);
                    commands[command].alias = '';
                    delete commands[commands[command].alias];
                }
            }
        } else {
            sendCommand('addaliaspanel ' + alias.toLowerCase() + ' ' + command.toLowerCase());
        }
        $('#' + htmlId + '-alias').val('');
    }

    /**
     * @function commandCost
     *
     * @param {string} htmlId
     */
    function commandCost(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', '').replace(/ /g, '---'),
            cost = $('#' + htmlId + '-cost').val();

        if (cost != '') {
            if (!command.includes('---')) {
                sendDBUpdate('command_edit_cost', 'pricecom', command.toLowerCase(), String(cost));
                sendCommand('updatecommandcost ' + cost + ' ' + command.toLowerCase());
            } else {
                sendCommand('updatecommandcost ' + cost + ' ' + command.toLowerCase());
                command = command.split('---');
                commands[command[0]].subCommand[command[1]].cost = cost;
                sendDBUpdate('command_edit_cost', 'pricecom', command[0].toLowerCase() + ' ' + command[1].toLowerCase(), String(cost));
            }
        }

        $('#' + htmlId + '-cost').val('');
    }

    /**
     * @function commandReward
     *
     * @param {string} htmlId
     */
    function commandReward(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', '').replace(/ /g, '---'),
            reward = $('#' + htmlId + '-reward').val();

        if (reward != '') {
            if (!command.includes('---')) {
                sendDBUpdate('command_edit_reward', 'paycom', command.toLowerCase(), String(reward));
                sendCommand('updatecommandreward ' + reward + ' ' + command.toLowerCase());
            } else {
                sendCommand('updatecommandreward ' + reward + ' ' + command.toLowerCase());
                command = command.split('---');
                commands[command[0]].subCommand[command[1]].reward = reward;
                sendDBUpdate('command_edit_reward', 'paycom', command[0].toLowerCase() + ' ' + command[1].toLowerCase(), String(reward));
            }
        }

        $('#' + htmlId + '-reward').val('');
    }

    /**
     * @function commandCooldown
     *
     * @param {string} htmlId
     */
    function commandCooldown(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', '').replace(/ /g, '---'),
            cooldown = $('#' + htmlId + '-cooldown').val();

        if (cooldown != '') {
            if (!command.includes('---')) {
                sendDBUpdate('command_edit_cooldown', 'cooldown', command.toLowerCase(), String(cooldown));
                sendCommand('updatecommandcooldown ' + cooldown + ' ' + command.toLowerCase());
            } else {
                sendCommand('updatecommandcooldown ' + cooldown + ' ' + command.toLowerCase());
                command = command.split('---');
                commands[command[0]].subCommand[command[1]].cooldown = cooldown;
                sendDBUpdate('command_edit_cooldown', 'cooldown', command[0].toLowerCase() + ' ' + command[1].toLowerCase(), String(cooldown));
            }
        }

        $('#' + htmlId + '-cooldown').val('');
    }

    /**
     * @function commandPermission
     *
     * @param {string} htmlId
     */
    function commandPermission(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', '').replace(/ /g, '---'),
            permission = getPermissionIdByName($('#' + htmlId + '-permission').html().trim());

        if (permission != '') {
            if (!command.includes('---')) {
                sendDBUpdate('command_edit_perm', 'permcom', command.toLowerCase(), String(permission));
                commands[command].permission = permission;
                sendCommand('updatecommandpermission ' + permission + ' ' + command.toLowerCase());
            } else {
                sendCommand('updatecommandpermission ' + permission + ' ' + command.toLowerCase());
                command = command.split('---');
                commands[command[0]].subCommand[command[1]].permission = permission;
                sendDBUpdate('command_edit_perm', 'permcom', command[0].toLowerCase() + ' ' + command[1].toLowerCase(), String(permission));
            }
        }

        $('#' + htmlId + '-permission').html('Everyone');
    }

    /**
     * @function commandActive
     *
     * @param {string} htmlId
     */
    function commandActive(htmlId) {
        var command = $('#' + htmlId + '-name').val().replace('!', '').replace(/ /g, '---'),
            active = $('#' + htmlId + '-active').html();

        if (active.length == 1) {
            return;
        }
        var cmd = command.split('---');

        if (active.trim() == 'Yes') {
            sendDBDelete('command_edit_active', 'disabledCommands', command.toLowerCase().split('---').join(' '));
            sendCommand('updatecommandactive ' + active.trim() + ' ' + command.toLowerCase());
        } else {
            sendDBUpdate('command_edit_active', 'disabledCommands', command.toLowerCase().split('---').join(' '), 'true');
            sendCommand('updatecommandactive ' + active.trim() + ' ' + command.toLowerCase());
        }
    }

    /**
     * @function maxLength
     *
     * @export $.modal
     * @param {string} key
     */
    function maxLength(key, button) {
        $('#' + key).on({
            keyup: function() {
                if (this.value.length >= 495) {
                    document.getElementById(key).style.setProperty('color', '#c76c6c', 'important');
                    document.getElementById(key).style.setProperty('border', '1px solid #c76c6c', 'important');
                    document.getElementById(button).disabled = true;
                } else {
                    document.getElementById(key).style.setProperty('color', '', 'important');
                    document.getElementById(key).style.setProperty('border', '', 'important');
                    document.getElementById(button).disabled = false;
                }
            }
        });
    }

    /**
     * @function cooldown
     *
     * @export $.modal
     */
    function cooldown() {
        var cooldown = $('#global-cooldown').val();

        sendDBUpdate('global-cooldown', 'cooldown', 'globalCooldownTime', String(cooldown));
        setTimeout(function() { doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    /**
     * @function rangeUpdate
     *
     * @export $
     * @param {string} val
     * @param {string} id
     * @param {string} string
     */
    function rangeUpdate(val, id, string) { 
        document.getElementById(id).innerHTML = val + ' ' + string; 
    }

    /**
     * @function globalCooldown
     *
     * @export $
     * @param {string} toggle
     */
    function globalCooldown(toggle) {
        $("#globalCooldown").html("<i style=\"color: #6136b1\" class=\"fa fa-spinner fa-spin\" />");
        if (toggle == 'on') {
            sendDBUpdate('command_cooldown_global', 'cooldown', 'globalCooldown', 'true');
        } else {
            sendDBUpdate('command_cooldown_global', 'cooldown', 'globalCooldown', 'false');
        }
        setTimeout(function() { sendCommand('reloadcooldown'); doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    /**
     * @function perUserCooldown
     *
     * @export $
     * @param {string} toggle
     */
    function perUserCooldown(toggle) {
        $("#perUserCooldown").html("<i style=\"color: #6136b1\" class=\"fa fa-spinner fa-spin\" />");
        if (toggle == 'on') {
            sendDBUpdate('command_cooldown_global', 'cooldown', 'perUserCooldown', 'true');
        } else {
            sendDBUpdate('command_cooldown_global', 'cooldown', 'perUserCooldown', 'false');
        }
        setTimeout(function() { sendCommand('reloadcooldown'); doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    /**
     * @function modCooldown
     *
     * @export $
     * @param {string} toggle
     */
    function modCooldown(toggle) {
        $("#modCooldown").html("<i style=\"color: #6136b1\" class=\"fa fa-spinner fa-spin\" />");
        if (toggle == 'on') {
            sendDBUpdate('command_cooldown_global', 'cooldown', 'modCooldown', 'true');
        } else {
            sendDBUpdate('command_cooldown_global', 'cooldown', 'modCooldown', 'false');
        }
        setTimeout(function() { sendCommand('reloadcooldown'); doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    /* Import the HTML file for this panel. */
    $('#commandsPanel').load('/panel/commands.html');

    /* Load the DB items for this panel, wait to ensure that we are connected. */
    var interval = setInterval(function() {
        if (isConnected && TABS_INITIALIZED) {
            var active = $('#tabs').tabs('option', 'active');
            if (active == 1) {
                doQuery();
                clearInterval(interval);
            }
        }
    }, INITIAL_WAIT_TIME);

    /* Query the DB every 30 seconds for updates. */
    setInterval(function() {
        var active = $('#tabs').tabs('option', 'active');
        if (active == 1 && isConnected && !isInputFocus()) {
            newPanelAlert('Refreshing Commands Data', 'success', 1000);
            doQuery();
        }
    }, 3e4);

    /* Export to the $ api */
    $.commandsOnMessage = onMessage;
    $.commandsDoQuery = doQuery;
    $.rangeUpdate = rangeUpdate;
    $.globalCooldown = globalCooldown;
    $.perUserCooldown = perUserCooldown;
    $.modCooldown = modCooldown;
    $.modal = {
        open: open,
        remove: remove,
        maxLength: maxLength,
        add: add,
        edit: edit,
        def: def,
        cooldown: cooldown
    };
})();
