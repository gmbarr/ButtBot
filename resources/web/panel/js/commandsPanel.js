/*
 * Copyright (C) 2016 phantombot.tv
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * @author ScaniaTV
 * @author IllusionaryOne
 */

/*
 * customCommandsPanel.js
 * Drives the Custom Commands Panel
 */
(function() {
    var commands = {};

    /*
     * @function onMessage
     * @info This event is generated by the connection (WebSocket) object.
     *
     * @param {string} message
     */
    function onMessage(message) {
        var msgObject;

        try {
            msgObject = JSON.parse(message.data);
        } catch (ex) {
            return;
        }

        if (panelHasQuery(msgObject)) {
            var key = '',
                value = '',
                html = '<table>',
                results,
                i, l;

            if (panelCheckQuery(msgObject, 'commands_permission')) {
                results = msgObject['results'].sort(sort);

                for (i in results) {
                    key = results[i]['key'];
                    value = results[i]['value'];

                    if (!key.includes(' ')) {
                        if (commands[key] === undefined) {
                            commands[key] = { isDisabled: false, response: null, isCustom: false, cost: 0, reward: 0, cooldown: 0, permission: value, alias: '', subCommand: {} };
                        }
                    } else {
                        key = key.split(' ');
                        if (commands[key[0]] === undefined) {
                            commands[key[0]] = { isDisabled: false, response: null, isCustom: false, cost: 0, reward: 0, cooldown: 0, permission: value, alias: '', subCommand: {} };
                        }
                        commands[key[0]].subCommand[key[1]] = { isDisabled: false, response: null, isCustom: false, cost: 0, reward: 0, cooldown: 0, permission: value, alias: '' };
                    }
                }
            }

            if (panelCheckQuery(msgObject, 'commands_aliases')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[value] !== undefined && !value.includes(' ') && !value.includes(';')) {
                        commands[value].alias = (key ? key : '');
                    } else if (value.includes(' ')) {
                        value = value.split(' ');
                        if (commands[value[0]] !== undefined && commands[value[0]].subCommand[value[1]] !== undefined && !value.includes(';')) {
                            commands[value[0]].subCommand[value[1]].alias = (key ? key : '');
                        }
                    } else {
                        value = value.split(';');
                        for (var i in value) {
                            if (commands[value[i]] !== undefined) {
                                commands[value[i]].alias = key;
                            }
                        }
                    }
                }
            }

            if (panelCheckQuery(msgObject, 'commands_costs')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[key] !== undefined) {
                        commands[key].cost = (value ? value : 0); 
                    }
                }
            }

            if (panelCheckQuery(msgObject, 'commands_reward')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[key] !== undefined) {
                        commands[key].reward = (value ? value : 0); 
                    }
                }
            }

            if (panelCheckQuery(msgObject, 'commands_cooldown')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[key] !== undefined) {
                        commands[key].cooldown = (value ? value : 0);
                    }
                }
            }

            if (panelCheckQuery(msgObject, 'commands_disabled')) {
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    if (commands[key] !== undefined) {
                        commands[key].isDisabled = (value ? value : false); 
                    }
                }
            }

            if (panelCheckQuery(msgObject, 'commands_custom')) {
                html = '<table> <tr> <th style="border: 1px solid #3a3939;">Command</th> <th style="border: 1px solid #3a3939;">Response</th><th style="border-top: 1px solid #3a3939; border-bottom: 1px solid #3a3939;"></th>' +
                       '<th style="border-top: 1px solid #3a3939; border-bottom: 1px solid #3a3939;"></th></tr>';
                for (i in msgObject['results']) {
                    key = msgObject['results'][i]['key'];
                    value = msgObject['results'][i]['value'];

                    commands[key].isCustom = true;
                    commands[key].response = value;
                    if (value.length > 75) {
                        value = value.substring(0, 75);
                        value += '...';
                    }

                    if (commands[key] !== undefined) {
                        html += '<tr>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">!' + key + '</td>' +
                            '<td style="width: 80%; border: 1px solid #3a3939;">' + value + '</td>' +
                            '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.open(\''+ key +'\', \'null\',\'true\')"><i class="fa fa-pencil"/></button></td>' +
                            '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.remove(\''+ key +'\', \'false\')"><i class="fa fa-trash"/></button></td>' +
                            '</tr>';
                    }
                }
                html += '</table>';
                $('#command-list').html(html);
                handleInputFocus();

                html = '<table> <tr> <th style="border: 1px solid #3a3939;">Command</th> <th style="border: 1px solid #3a3939;">Status</th><th style="border: 1px solid #3a3939;">Cooldown</th>' +
                '<th style="border: 1px solid #3a3939;">Cost</th> <th style="border: 1px solid #3a3939;">Reward</th> <th style="border: 1px solid #3a3939;">Permission</th>' +
                '<th style="border-top: 1px solid #3a3939; border-bottom: 1px solid #3a3939;"></th></tr>';
                var keys = Object.keys(commands);
                var subKeys;

                for (i in keys) {
                    if (commands[keys[i]].isCustom === false) {
                        html += '<tr>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">!' + keys[i] + '</td>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].isDisabled ? 'Disabled' : 'Enabled') + '</td>' +
                            '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].cooldown !== 0 ? commands[keys[i]].cooldown + ' sec' : 'Global') + '</td>' +
                            '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].cost + '</td>' +
                            '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].reward + '</td>' +
                            '<td style="width: 10%; border: 1px solid #3a3939;">' + getPermissionNameById(commands[keys[i]].permission) + '</td>' +
                            '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.open(\''+ keys[i] +'\', \'false\', \'false\')"><i class="fa fa-pencil"/></button></td>' +
                            '</tr>';
                        subKeys = Object.keys(commands[keys[i]].subCommand);
                        for (l in subKeys) {
                            html += '<tr>' +
                                '<td style="width: 20%; border: 1px solid #3a3939;">!' + keys[i] + ' ' + subKeys[l] + '</td>' +
                                '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].subCommand[subKeys[l]].isDisabled ? 'Disabled' : 'Enabled') + '</td>' +
                                '<td style="width: 20%; border: 1px solid #3a3939;">' + (commands[keys[i]].subCommand[subKeys[l]].cooldown !== 0 ? commands[keys[i]].subCommand[subKeys[l]].cooldown + ' sec' : 'Global') + '</td>' +
                                '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].subCommand[subKeys[l]].cost + '</td>' +
                                '<td style="width: 10%; border: 1px solid #3a3939;">' + commands[keys[i]].subCommand[subKeys[l]].reward + '</td>' +
                                '<td style="width: 10%; border: 1px solid #3a3939;">' + getPermissionNameById(commands[keys[i]].subCommand[subKeys[l]].permission) + '</td>' +
                                '<td><button type="button" class="btn btn-default btn-xs" style="padding: 3px 7px 3px 7px;" onclick="$.modal.open(\''+ keys[i] +'\', \''+ subKeys[l] +'\', \'false\')">' +
                                '<i class="fa fa-pencil"/></button></td>' +
                                '</tr>';
                        }
                    }
                }
                html += '</table>';
                $('#default-command-list').html(html);
                handleInputFocus();
            }
        }
    }

    /**
     * @function doQuery
     */
    function doQuery() {
        sendDBKeys('commands_permission', 'permcom');

        /* Set a timeout here to give time to permcom to send all the keys. */
        setTimeout(function() {
            sendDBKeys('commands_aliases', 'aliases');
            sendDBKeys('commands_costs', 'pricecom');
            sendDBKeys('commands_reward', 'paycom');
            sendDBKeys('commands_disabled', 'disabledCommands');
            sendDBKeys('commands_cooldown', 'cooldown');
            setTimeout(function() { sendDBKeys('commands_custom', 'command'); }, 250);
        }, 150);
    }

    /**
     * @function sort
     *
     * @param {Object} a
     * @param {Object} b
     */
    function sort(a, b) {
        return panelStrcmp(a.key, b.key);
    }

    /**
     * @function getPermissionNameById
     *
     * @param {int} id
     */
    function getPermissionNameById(id) {
        if (id == 1) {
            return 'Administrators';
        } else if (id == 2) {
            return 'Moderators';
        } else if (id == 3) {
            return 'Subscribers';
        } else if (id == 4) {
            return 'Donators';
        } else if (id == 5) {
            return 'Hosters';
        } else if (id == 6) {
            return 'Regulars';
        } else {
            return 'Everyone';
        }
    }

    /**
     * @function getPermissionIdByName
     *
     * @param {string} name
     */
    function getPermissionIdByName(name) {
        if (name == 'Administrators') {
            return 1;
        } else if (name == 'Moderators') {
            return 2;
        } else if (name == 'Subscribers') {
            return 3;
        } else if (name == 'Donators') {
            return 4;
        } else if (name == 'Hosters') {
            return 5;
        } else if (name == 'Regulars') {
            return 6;
        } else {
            return 7;
        }
    }

    /**
     * @function open
     *
     * @export $.modal
     * @param {string} key
     * @param {string} subKey
     * @param {boolean} customCMD
     */
    function open(key, subKey, customCMD) {
        if (customCMD == 'true') {
            if (commands[key] !== undefined) {
                $('#edit-command-name').val('!' + key);
                $('#edit-command-response').val(commands[key].response);
                $('#edit-command-alias').val(commands[key].alias);
                $('#edit-command-cost').val(commands[key].cost);
                $('#edit-command-reward').val(commands[key].reward);
                $('#edit-command-permission').html(getPermissionNameById(commands[key].permission));
                $('#edit-command-active').html((commands[key].isDisabled ? 'No' : 'Yes'));
                $('#edit-command-cooldown2').html((commands[key].cooldown !== 0 ? commands[key].cooldown + ' Seconds' : 'Global Cooldown'));
                document.getElementById("edit-command-cooldown").value = commands[key].cooldown;
                $("#editcommand").modal();
            }
        } else {
            if (subKey == 'false') {
                $('#default-command-name').val('!' + key);
                $('#default-command-alias').val(commands[key].alias);
                $('#default-command-cost').val(commands[key].cost);
                $('#default-command-reward').val(commands[key].reward);
                $('#default-command-permission').html(getPermissionNameById(commands[key].permission));
                $('#default-command-active').html((commands[key].isDisabled ? 'No' : 'Yes'));
                $('#default-command-cooldown2').html((commands[key].cooldown !== 0 ? commands[key].cooldown + ' Seconds' : 'Global Cooldown'));
                document.getElementById("default-command-cooldown").value = commands[key].cooldown;
                $("#defaultcommand").modal();
            } else {
                $('#default-command-name').val('!' + key + ' ' + subKey);
                $('#default-command-alias').val(commands[key].subCommand[subKey].alias);
                $('#default-command-cost').val(commands[key].subCommand[subKey].cost);
                $('#default-command-reward').val(commands[key].subCommand[subKey].reward);
                $('#default-command-permission').html(getPermissionNameById(commands[key].subCommand[subKey].permission));
                $('#default-command-active').html((commands[key].subCommand[subKey].isDisabled ? 'No' : 'Yes'));
                $('#default-command-cooldown2').html((commands[key].subCommand[subKey].cooldown !== 0 ? commands[key].subCommand[subKey].cooldown + ' Seconds' : 'Global Cooldown'));
                document.getElementById("default-command-cooldown").value = commands[key].subCommand[subKey].cooldown;
                $("#defaultcommand").modal();
            }
        }
    }

    /**
     * @function remove
     *
     * @export $.modal
     * @param {string} key
     */
    function remove(key, open) {
        if (open == 'false') {
            if (commands[key] !== undefined) {
                $('#delete-command').html(key);
                $('#deletecommand').modal();
            }
        } else {
            key = $('#delete-command').html();
            sendDBDelete('command_delete', 'command', key);
            delete commands[key];
            setTimeout(function() { doQuery(); sendCommand('deletecommandpanel ' + key); }, TIMEOUT_WAIT_TIME);
        }
    }

    function add() {
        var command = $('#command-name').val().replace('!', ''),
            response = $('#command-response').val(),
            alias = ($('#command-alias').val() ? $('#command-alias').val() : 'null'),
            cost = ($('#command-cost').val() ? $('#command-cost').val() : 'null'),
            reward = ($('#command-reward').val() ? $('#command-reward').val() : 'null'),
            permission = getPermissionIdByName($('#command-permission').html()),
            cooldown = ($('#command-cooldown').val() != '0' ? $('#command-cooldown').val() : 'null');

        sendDBUpdate('commands_add', 'command', command.toLowerCase(), response);
        sendDBUpdate('commands_add', 'permcom', command.toLowerCase(), String(permission));

        if (alias != 'null') sendDBUpdate('commands_add', 'aliases', alias.toLowerCase(), command.toLowerCase());
        if (cost != 'null') sendDBUpdate('commands_add', 'pricecom', command.toLowerCase(), String(cost));
        if (reward != 'null') sendDBUpdate('commands_add', 'paycom', command.toLowerCase(), String(reward));
        if (cooldown != 'null') sendDBUpdate('commands_add', 'cooldown', command.toLowerCase(), String(cooldown));

        sendCommand('addcommandpanel ' + command + ' ' + response.replace(/ /g, '___') + ' ' + alias + ' ' + cost + ' ' + permission + ' ' + cooldown);

        $('#command-name').val('');
        $('#command-response').val('');
        $('#command-cooldown').val('');
        $('#command-reward').val('');
        $('#command-cost').val('');
        $('#command-permission').html('')
        $('#command-alias').val('');
        setTimeout(function() { doQuery(); }, TIMEOUT_WAIT_TIME);
    }

    /**
     * @function maxLength
     *
     * @export $.modal
     * @param {string} key
     */
    function maxLength(key, button) {
        $('#' + key).on({
            keyup: function() {
                if (this.value.length >= 495) {
                    document.getElementById(key).style.setProperty('color', '#c76c6c', 'important');
                    document.getElementById(key).style.setProperty('border', '1px solid #c76c6c', 'important');
                    document.getElementById(button).disabled = true;
                } else {
                    document.getElementById(key).style.setProperty('color', '', 'important');
                    document.getElementById(key).style.setProperty('border', '', 'important');
                    document.getElementById(button).disabled = false;
                }
            }
        });
    }


    /* Import the HTML file for this panel. */
    $('#commandsPanel').load('/panel/commands.html');

    /* Load the DB items for this panel, wait to ensure that we are connected. */
    var interval = setInterval(function() {
        if (isConnected && TABS_INITIALIZED) {
            var active = $('#tabs').tabs('option', 'active');
            if (active == 1) {
                doQuery();
                clearInterval(interval);
            }
        }
    }, INITIAL_WAIT_TIME);

    /* Query the DB every 30 seconds for updates. */
    setInterval(function() {
        var active = $('#tabs').tabs('option', 'active');
        if (active == 1 && isConnected && !isInputFocus()) {
            newPanelAlert('Refreshing Commands Data', 'success', 1000);
            doQuery();
        }
    }, 3e4);

    $.commandsOnMessage = onMessage;
    $.modal = {
        open: open,
        remove: remove,
        maxLength: maxLength,
        add: add
    };
})();
