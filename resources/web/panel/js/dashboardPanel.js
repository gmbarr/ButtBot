/*
 * dashboardPanel.js
 * Drives the Dashboard Panel
 */
(function() {

    var panelStatsEnabled = false;
    var streamOnline = false;

    /*
     * @function onMessage
     * This event is generated by the connection (WebSocket) object.
     */
    function onMessage(message) {
        try {
            var msgObject = JSON.parse(message.data);
        } catch (ex) {
            return;
        }

        // Check for dbkeysresult queries
        if (msgObject['dbkeysresult'] != undefined) {
            if (msgObject['dbkeysresult'].localeCompare('dashboard_highlights') == 0) {
                var htmlStr = "";
                for (var i in msgObject['results']) {
                    var highlightData = msgObject['results'][i]['value'];
                    htmlStr += highlightData + "<br>";
                }
                if (htmlStr.length == 0) {
                    $("#showHighlights").html("No Highlights Found");
                } else {
                    $("#showHighlights").html(htmlStr);
                }
            }

            if (msgObject['dbkeysresult'].localeCompare('dashboard_chatCount') == 0) {
                var chatDate = "",
                    chatKey = "",
                    chatCount = "";

                for (var i = 0; i <= 4; i++) {
                    var dateObj = new Date();
                    chatDate = $.format.date(Date.now() - (i * 24 * 36e5), "MM.dd.yy");
                    chatKey = "chat_" + chatDate;
                    chatCount = "0";
                    for (idx in msgObject['results']) {
                        if (msgObject['results'][idx]['key'].localeCompare(chatKey) == 0) {
                            chatCount = msgObject['results'][idx]['value'];
                            break;
                        }
                    }
                    $("#chatDate-" + i).html("<span class=\"purplePill\">Date: " + chatDate + "</span>");
                    $("#chatCount-" + i).html("<span class=\"bluePill\">Chat Count: " + chatCount + "</span>");
                }
            }

            if (msgObject['dbkeysresult'].localeCompare('dashboard_modCount') == 0) {
                var modDate = "",
                    modKey = "",
                    modCount = "";

                for (var i = 0; i <= 4; i++) {
                    var dateObj = new Date();
                    modDate = $.format.date(Date.now() - (i * 24 * 36e5), "MM.dd.yy");
                    modKey = "chat_" + chatDate;
                    modCount = "0";
                    for (idx in msgObject['results']) {
                        if (msgObject['results'][idx]['key'].localeCompare(modKey) == 0) {
                            chatCount = msgObject['results'][idx]['value'];
                            break;
                        }
                    }
                    $("#modCount-" + i).html("<span class=\"redPill\">Timeouts: " + modCount + "</span>");
                }

            }

        }

        // Check for dbqueryresult queries
        if (msgObject['dbqueryresult'] != undefined) {

            if (msgObject['dbqueryresult'].localeCompare('dashboard_panelStatsEnabled') == 0) {
                if (msgObject['result']['enabled'].localeCompare('true') == 0) {
                    if (!panelStatsEnabled) {
                        panelStatsEnabled = true;
                        doQuery(); // Run the query again to populate fields.
                    }
                } else {
                    $("#panelStatsEnabled").html("<span>Panel Stats are Disabled</span>");
                }
            }

            if (msgObject['dbqueryresult'].localeCompare('dashboard_streamTitle') == 0) {
                $("#streamTitleInput").attr("placeholder", msgObject['result']['title']).blur();
            }
 
            if (msgObject['dbqueryresult'].localeCompare('dashboard_gameTitle') == 0) {
                $("#gameTitleInput").attr("placeholder", msgObject['result']['game']).blur();
            }
 
            if (msgObject['dbqueryresult'].localeCompare('dashboard_streamOnline') == 0) {
                streamOnline = (msgObject['result']['streamOnline'].localeCompare('true') == 0);
                if (streamOnline) {
                    $("#streamOnline").html("<span class=\"greenPill\">Stream Online</span>");
                } else {
                    $("#streamOnline").html("<span class=\"redPill\">Stream Offline</span>");
                }
            }

            if (streamOnline) {
                if (msgObject['dbqueryresult'].localeCompare('dashboard_streamUptime') == 0) {
                    $("#streamUptime").html("<span class=\"bluePill\">Uptime: " + msgObject['result']['streamUptime']);
                }
                if (msgObject['dbqueryresult'].localeCompare('dashboard_viewerCount') == 0) {
                    $("#viewerCount").html("<span class=\"bluePill\">Viewers: " + msgObject['result']['viewerCount']);
                }
            }
        }
    }

    /**
     * @function doQuery
     */
    function doQuery() {
        sendDBQuery("dashboard_streamTitle", "streamInfo", "title");
        sendDBQuery("dashboard_gameTitle", "streamInfo", "game");
        sendDBKeys("dashboard_highlights", "highlights");

        if (!panelStatsEnabled) {
            sendDBQuery("dashboard_panelStatsEnabled", "panelstats", "enabled");
        } else {
            sendDBQuery("dashboard_viewerCount", "panelstats", "viewerCount");
            sendDBQuery("dashboard_streamOnline", "panelstats", "streamOnline");
            sendDBQuery("dashboard_streamUptime", "panelstats", "streamUptime");
            sendDBKeys("dashboard_chatCount", "panelchatstats");
            sendDBKeys("dashboard_modCount", "panelmodstats");
        }
    }

    /**
     * @function setStreamTitle
     */
    function setStreamTitle() {
        sendCommand("title " + $("#streamTitleInput").val());
    }

    /**
     * @function setGameTitle
     */
    function setGameTitle() {
        sendCommand("game " + $("#gameTitleInput").val());
    }

    /**
     * @function chatReconnect
     */
    function chatReconnect() {
        sendCommand("reconnect");
    }

    /**
     * @function setHighlight
     */
    function setHighlight() {
        sendCommand("highlight " + $("#highlightInput").val());
    }

    /**
     * @function clearHighlights
     */
    function clearHighlights() {
        sendCommand("clearhighlights");
    }

    /**
     * @function setMultiLink
     */
    function setMultiLink() {
        sendCommand("multi set " + $("#multiLinkInput").val());
    }
    
    /**
     * @function setMultiLinkTimer
     */
    function setMultiLinkTimer() {
        sendCommand("multi timerinterval " + $("#multiLinkTimerInput").val());
    }

    /**
     * @function clearMultiLink
     */
    function clearMultiLink() {
        sendCommand("multi clear");
    }
 
    /**
     * @function multiLinkTimerOn
     */
    function multiLinkTimerOn() {
        sendCommand("multi timer on");
    }
 
    /**
     * @function multiLinkTimerOff
     */
    function multiLinkTimerOff() {
        sendCommand("multi timer off");
    }
 
    // Import the HTML file for this panel.
    $("#dashboardPanel").load("/panel/dashboard.html");

    // Load the DB items for this panel, wait to ensure that we are connected.
    var interval = setInterval(function() {
        if (isConnected) {
            doQuery();
            clearInterval(interval); 
        }
    }, 1000);

    // Query the DB every 30 seconds for updates.
    setInterval(function() {
        if (isConnected) {
            newPanelAlert('Refreshing Data', 'success', 500);
            doQuery();
        }
    }, 3e4);

    // Export functions - Needed when calling from HTML.
    $.dashboardOnMessage = onMessage;
    $.setStreamTitle = setStreamTitle;
    $.setGameTitle = setGameTitle;
    $.chatReconnect = chatReconnect;
    $.setHighlight = setHighlight;
    $.clearHighlights = clearHighlights;
    $.setMultiLink = setMultiLink;
    $.setMuliLinkTimer = setMultiLinkTimer;
    $.clearMultiLink = clearMultiLink;
    $.multiLinkTimerOn = multiLinkTimerOn;
    $.multiLinkTimerOff = multiLinkTimerOff;
})();
